AC_INIT(configure.in)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(clusterlib, 0.0.2)

AM_PATH_CPPUNIT(1.10.12)

AC_LANG_CPLUSPLUS
AC_PROG_CXX
AC_PROG_LIBTOOL
#AC_PROG_RANLIB

BUILD_PATH="`pwd`"

case "$srcdir" in
..*) SOURCE_PATH=$BUILD_PATH/${srcdir};;
*) SOURCE_PATH=${srcdir};;
esac

AC_SUBST(BUILD_PATH)
AC_SUBST(SOURCE_PATH)

# Establish some basic info about the OS.
os_type="`uname -s`"
osver="`uname -a | sed 's/\.//g' | awk '{print $1$3}'`"

dnl Disable quoting so that the brackets are not stripped from the regex.
changequote(, )dnl
os_version="`uname -r | sed 's/[A-Za-z]//' | awk -F. '{printf("%d%d",$1,$2)}'`"
changequote([, ])dnl

changequote(, )dnl
enviroment_use_ccache="`echo $YST_DEFAULT_CCACHE`"
changequote([, ])dnl
default_with_ccache="no"
if (test $enviroment_use_ccache ) && (test $enviroment_use_ccache = "yes" ); then
   default_with_ccache="yes"
fi

#if test $os_type = "Linux"; then
#    AR="/usr/bin/ar cru"
#fi

#AC_DEFINE_UNQUOTED($os_type)
#AC_DEFINE_UNQUOTED(OS_$osver)
#AC_DEFINE_UNQUOTED(OS_TYPE, $os_type)
#AC_DEFINE_UNQUOTED(OS_VERSION, $os_version)

OS_TYPE=$os_type
AC_SUBST(OS_TYPE)

if test "$enable_release" = "yes"; then
    build_type="Optimized"
else
    build_type="Debug"
fi

### GCC ###

AC_MSG_CHECKING(whether to use gcc)
AC_ARG_WITH(gcc,
  [  --with-gcc           Use gcc.],
  [ case "${withval}" in
      no)
        ;;
      yes)
        COMPILER="3.4.3"
        CC="/usr/releng/${RELTOOLS}/gcc/${COMPILER}/bin/gcc"
        CXX="/usr/releng/${RELTOOLS}/gcc/${COMPILER}/bin/g++"
        with_gcc="yes"
        compiler_version="_gcc343"
        ;;
      gcc34)
        COMPILER="3.4.3"
        CC="/usr/releng/${RELTOOLS}/gcc/${COMPILER}/bin/gcc"
        CXX="/usr/releng/${RELTOOLS}/gcc/${COMPILER}/bin/g++"
        with_gcc="yes"
        compiler_version="_gcc343"
        ;;
      gcc411)
        COMPILER="4.1.1"
        CC="/usr/releng/${RELTOOLS}/gcc/${COMPILER}/bin/gcc"
        CXX="/usr/releng/${RELTOOLS}/gcc/${COMPILER}/bin/g++"
        with_gcc="yes"
        compiler_version="_gcc411"
        ;;
      *)
        COMPILER="3.4.3"
        CC="/usr/releng/${RELTOOLS}/gcc/${COMPILER}/bin/gcc"
        CXX="/usr/releng/${RELTOOLS}/gcc/${COMPILER}/bin/g++"
        with_gcc="yes"
        compiler_version="_gcc343"
        ;;
    esac ],[
        COMPILER="3.4.3"
        CC="/usr/releng/${RELTOOLS}/gcc/${COMPILER}/bin/gcc"
        CXX="/usr/releng/${RELTOOLS}/gcc/${COMPILER}/bin/g++"
        with_gcc="yes"
        compiler_version="_gcc343"
    ]
)
AC_MSG_RESULT($with_gcc)
AC_MSG_RESULT($withval)
AC_MSG_RESULT($compiler_version)

### Boost ###

BOOST_VERSION="1.33.1"

AC_MSG_CHECKING(location of Boost headers and libraries)
AC_ARG_WITH(boost_root,
  [ --with-boost-root   location of Boost libraries and headers.],
  [ case "${withval}" in
      yes|no)
        AC_ERROR(Option --with-boost-root requires a path argument.)
        ;;
    esac ],
  [
      with_boost_root="/usr/releng/external/boost/$BOOST_VERSION$compiler_version"
  ]
)
AC_MSG_RESULT($with_boost_root)

BOOST_PATH="${with_boost_root}"
BOOST_LIB_PATH="$BOOST_PATH/lib"
BOOST_INCLUDES="$BOOST_PATH/include/boost-`echo "$BOOST_VERSION" | sed -e 's/\./_/g'`"
BOOST_LIB="$BOOST_LIB_PATH/libboost_unit_test_framework-gcc.a"

#AC_CHECK_LIB(boost_unit_test_framework-gcc, main, [BOOST="-L${BOOST_LIB_PATH}"],,["-L${BOOST_LIB_PATH}"])
#if test -z "${BOOST}"; then
#  AC_ERROR("... invalid Boost library!")
#fi

AC_SUBST(BOOST)
AC_SUBST(BOOST_PATH)
AC_SUBST(BOOST_LIB_PATH)
AC_SUBST(BOOST_INCLUDES)
AC_SUBST(BOOST_LIB)


### ZooKeeper ###

ZOOKEEPER_VERSION="2.2.0"

AC_MSG_CHECKING(location of ZooKeeper headers and libraries)
AC_ARG_WITH(zookeeper_root,
  [ --with-zookeeper-root   location of ZooKeeper libraries and headers.],
  [ case "${withval}" in
      yes|no)
        AC_ERROR(Option --with-zookeeper-root requires a path argument.)
        ;;
    esac ],
  [
        with_zookeeper_root="/usr/releng/internal/libzookeeper/$ZOOKEEPER_VERSION$compiler_version"
  ]
)
AC_MSG_RESULT($with_zookeeper_root)

ZOOKEEPER_PATH="${with_zookeeper_root}"
ZOOKEEPER_LIB_PATH="$ZOOKEEPER_PATH/lib"
ZOOKEEPER_INCLUDES="$ZOOKEEPER_PATH/include"
ZOOKEEPER_LIB="$ZOOKEEPER_LIB_PATH/libzookeeper_mt.a"

LD_LIBRARY_PATH="$ZOOKEEPER_LIB_PATH"

AC_CHECK_LIB(zookeeper_mt, main, [ZOOKEEPER="-L${ZOOKEEPER_LIB_PATH} -lzookeeper_mt"],,["-L${ZOOKEEPER_LIB_PATH}"])
if test -z "${ZOOKEEPER}"; then
  AC_ERROR("... invalid zookeeper library!")
fi

AC_SUBST(ZOOKEEPER)
AC_SUBST(ZOOKEEPER_PATH)
AC_SUBST(ZOOKEEPER_LIB_PATH)
AC_SUBST(ZOOKEEPER_INCLUDES)
AC_SUBST(ZOOKEEPER_LIB)

### YTS ###

CDXCORE_VERSION="7.4.10"

CDXCORE_PATH="/usr/releng/internal/catalog_cdxcore/$CDXCORE_VERSION$compiler_version"
CDXCORE_INCLUDES="$CDXCORE_PATH/include"
CDXCORE_LIB_PATH="$CDXCORE_PATH/lib"

AC_SUBST(CDXCORE_PATH)
AC_SUBST(CDXCORE_INCLUDES)
AC_SUBST(CDXCORE_LIB_PATH)

### CPPUTILS ###

CPPUTILS_VERSION="5.0.0"

CPPUTILS_PATH="/usr/releng/internal/c++_utils/$CPPUTILS_VERSION$compiler_version"
CPPUTILS_INCLUDES="$CPPUTILS_PATH/include"
CPPUTILS_LIB_PATH="$CPPUTILS_PATH/lib"

AC_SUBST(CPPUTILS_PATH)
AC_SUBST(CPPUTILS_INCLUDES)
AC_SUBST(CPPUTILS_LIB_PATH)

CDXCORE="-L$CDXCORE_LIB_PATH -lhtml -lcrawdex -lcrawdexcore -lBasics -linktomi -ldoc -L$CPPUTILS_LIB_PATH -lc++_utils_dbg -pthread -ldl -ltcl8.4 -lrt -lz"
AC_SUBST(CDXCORE)

CDXCORE_CXXFLAGS="-fPIC -DLinux=1 -DOS_TYPE=Linux -D_PTHREADS=1 -D_FILE_OFFSET_BITS=64 -D_REDHAT_=1 -DBAS_DBG_MSGS=1 -DUSE_EXCEPTIONS=1 -rdynamic -Wno-deprecated -Wno-invalid-offsetof -DNEED_HRTIME"
AC_SUBST(CDXCORE_CXXFLAGS)

### Simon ###

SIMON_VERSION="1.1.1"

AC_MSG_CHECKING(location of Simon headers and libraries)
AC_ARG_WITH(simon_root,
  [ --with-simon-root   location of Simon libraries and headers.],
  [ case "${withval}" in
      yes|no)
        AC_ERROR(Option --with-simon-root requires a path argument.)
        ;;
    esac ],
  [
      with_simon_root="/usr/releng/internal/simon/$SIMON_VERSION$compiler_version"
  ]
)
AC_MSG_RESULT($with_simon_root)

SIMON_PATH="${with_simon_root}"
SIMON_LIB_PATH="$SIMON_PATH/client/lib"
SIMON_INCLUDES="$SIMON_PATH/client/include"
SIMON_LIB="$SIMON_LIB_PATH/libsimon.a $SIMON_LIB_PATH/libBasicsSubset.a"

AC_CHECK_LIB(simon, main, [SIMON="-L${SIMON_LIB_PATH} -lsimon -lBasicsSubset"],,["-L${SIMON_LIB_PATH}"])
if test -z "${SIMON}"; then
  AC_ERROR("... invalid Simon library!")
fi

AC_SUBST(SIMON)
AC_SUBST(SIMON_PATH)
AC_SUBST(SIMON_LIB_PATH)
AC_SUBST(SIMON_INCLUDES)
AC_SUBST(SIMON_LIB)

### log4cxx ###

LOG4CXX_VERSION="0.10.0"

AC_MSG_CHECKING(location of log4cxx headers and libraries)
AC_ARG_WITH(log4cxx_root,
  [ --with-log4cxx-root   location of log4cxx libraries and headers.],
  [ case "${withval}" in
      yes|no)
        AC_ERROR(Option --with-log4cxx-root requires a path argument.)
        ;;
    esac ],
  [
      with_log4cxx_root="/usr/releng/external/log4cxx-$LOG4CXX_VERSION"
  ]
)
AC_MSG_RESULT($with_log4cxx_root)

LOG4CXX_PATH="${with_log4cxx_root}"
LOG4CXX_LIB_PATH="$LOG4CXX_PATH/lib"
LOG4CXX_INCLUDES="$LOG4CXX_PATH/include"
LOG4CXX_LIB="$LOG4CXX_LIB_PATH/liblog4cxx.a"

APR_LIB_PATH="/usr/releng/external/apr-1.2.12/lib"
APR_UTIL_LIB_PATH="/usr/releng/external/apr-util-1.2.12/lib"

AC_CHECK_LIB(log4cxx, main, [LOG4CXX="-L${LOG4CXX_LIB_PATH} -Wl,--whole-archive,-llog4cxx,--no-whole-archive"],,["-L${LOG4CXX_LIB_PATH}"])
if test -z "${LOG4CXX}"; then
  AC_ERROR("... invalid log4cxx library!")
fi

AC_SUBST(LOG4CXX)
AC_SUBST(LOG4CXX_PATH)
AC_SUBST(LOG4CXX_LIB_PATH)
AC_SUBST(LOG4CXX_INCLUDES)
AC_SUBST(LOG4CXX_LIB)
AC_SUBST(APR_LIB_PATH)
AC_SUBST(APR_UTIL_LIB_PATH)

### BUILDSTAMP ###

BUILDSTAMP_SOURCE="OldBuildStamp.cc"
BUILDSTAMP_OBJECT="`echo $BUILDSTAMP_SOURCE | sed 's/\.cc$/\.o/'`"
MAKE_BUILDSTAMP_SOURCE=\
"echo \"Use NEW_BUILDSTAMP_SOURCE \" > \$(BUILDSTAMP_SOURCE)"
MAKE_BUILDSTAMP_OBJECT=\
"echo \"Use NEW_BUILDSTAMP_SOURCE \" > \$(BUILDSTAMP_OBJECT)"

NEW_BUILDSTAMP_SOURCE="NewBuildStamp.cc"
NEW_BUILDSTAMP_OBJECT="`echo $NEW_BUILDSTAMP_SOURCE | sed 's/\.cc$/\.o/'`"
NEW_BUILDSTAMP_PICOBJECT="`echo $NEW_BUILDSTAMP_SOURCE | sed 's/\.cc$/\.lo/'`"
NEW_MAKE_BUILDSTAMP_SOURCE=\
"rm -f \$(NEW_BUILDSTAMP_SOURCE); echo \"char *gInkBuildStamp = \
\\\"\$(PACKAGE)-\$(VERSION)~\`echo Build:\$\${BUILDNO-***UNOFFICIAL***}\`~\
$build_type~\
\`date '+%Y/%m/%d.%H:%M'\`~\`((cat \$(srcdir)/CVS/Tag 2> /dev/null) \
|| (echo mainline)) | sed 's/^T//'\`~\`whoami\`\\\";\" > \$(NEW_BUILDSTAMP_SOURCE)"

#NEW_MAKE_BUILDSTAMP_OBJECT="\$(CXXCOMPILE) -c \$(NEW_BUILDSTAMP_SOURCE)"
#NEW_MAKE_BUILDSTAMP_PICOBJECT="\$(CXXCOMPILE) -fPIC -c \$(NEW_BUILDSTAMP_SOURCE)"

AC_SUBST(BUILDSTAMP_SOURCE)
AC_SUBST(BUILDSTAMP_OBJECT)
AC_SUBST(MAKE_BUILDSTAMP_SOURCE)
AC_SUBST(MAKE_BUILDSTAMP_OBJECT)

AC_SUBST(NEW_BUILDSTAMP_SOURCE)
AC_SUBST(NEW_BUILDSTAMP_OBJECT)
AC_SUBST(NEW_BUILDSTAMP_PICOBJECT)
AC_SUBST(NEW_MAKE_BUILDSTAMP_SOURCE)
#AC_SUBST(NEW_MAKE_BUILDSTAMP_OBJECT)
#AC_SUBST(NEW_MAKE_BUILDSTAMP_PICOBJECT)

# openssl crypto md5
LIB_SSL="-lssl"

if test $os_type = "Linux" -a $os_version -ge 26; then
        LIB_SSL="-lxmlsec1-openssl"
fi
AC_SUBST(LIB_SSL)

OPENSSL_VERSION="0.9.7g"
AC_SUBST(OPENSSL_VERSION)

openssl_crypto_lib_ext=".a"
openssl_crypto_lib_root="/usr/releng/external/openssl"
openssl_crypto_inc_root="/usr/releng/external/openssl"
OPENSSL_INC_DIR="${openssl_crypto_inc_root}/${OPENSSL_VERSION}/include/openssl"

OPENSSLCRYPTO_INC_DIR="$OPENSSL_INC_DIR"
LIBOPENSSLCRYPTO="${openssl_crypto_lib_root}/${OPENSSL_VERSION}/lib/libcrypto.a"

AC_CHECK_LIB(thread, thr_create, LIBTHREAD="-lthread")
AC_SUBST(LIBTHREAD)

AC_CHECK_LIB(pthread, pthread_create, LIBPTHREAD="-lpthread")
AC_SUBST(LIBPTHREAD)

AC_MSG_CHECKING([Which thread package to link with])
if test $os_type = "SunOS" ; then
    LIB_THREAD_OS=$LIBTHREAD
fi
if test $os_type = "Linux" ; then
    LIB_THREAD_OS=$LIBPTHREAD
fi
AC_MSG_RESULT($LIB_THREAD_OS)
AC_SUBST(LIB_THREAD_OS)

AC_MSG_CHECKING([Which kernel statistics library to link with])
if test $os_type = "SunOS" ; then
    LIB_KSTAT_OS="-lkstat"
fi
if test $os_type = "Linux" ; then
    LIB_KSTAT_OS=""
fi
AC_MSG_RESULT($LIB_KSTAT_OS)
AC_SUBST(LIB_KSTAT_OS)

AC_MSG_RESULT(OPENSSL_INC_DIR = ${OPENSSL_INC_DIR})
AC_MSG_RESULT(OPENSSLCRYPTO_INC_DIR = ${OPENSSLCRYPTO_INC_DIR})
AC_MSG_RESULT(LIBOPENSSLCRYPTO = ${LIBOPENSSLCRYPTO})

AC_SUBST(OPENSSL_INC_DIR)
AC_SUBST(OPENSSLCRYPTO_INC_DIR)
AC_SUBST(LIBOPENSSLCRYPTO)


AC_CHECK_LIB(rt, clock_gettime, LIBRT="-lrt")
AC_CHECK_LIB(posix4, clock_gettime, LIBRT="-lposix4")
AC_SUBST(LIBRT)

AC_CHECK_LIB(socket, socket, LIBSOCKET="-lsocket")
AC_SUBST(LIBSOCKET)

AC_CHECK_LIB(nsl, gethostbyname, LIBNSL="-lnsl")
AC_SUBST(LIBNSL)

makefile_inc="$srcdir/Makefile.inc"
AC_SUBST_FILE(makefile_inc)

AC_OUTPUT(Manifest Makefile common/Makefile)
